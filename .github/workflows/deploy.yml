name: CI/CD - Build & Deploy to OCI

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: alelex10/backend-crm

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: echo "::set-output name=image_tag::${GITHUB_SHA::8}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (latest and sha)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.image_tag }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Install ssh client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.OCI_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
      - name: Add host to known_hosts (optional -- prevents interactive prompt)
        run: |
          ssh-keyscan -H ${{ secrets.TARGET_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH - stop, pull and run
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.TARGET_HOST }}
          username: ${{ secrets.TARGET_USER }}
          key: ${{ secrets.OCI_SSH_KEY }}
          script: |
            set -e
            IMAGE=${IMAGE_NAME}:${{ needs.build-and-push.outputs.image_tag }}
            # parar y eliminar contenedor antiguo (ignorar errores)
            docker stop ${{ secrets.CONTAINER_NAME }} || true
            docker rm ${{ secrets.CONTAINER_NAME }} || true
            # login a docker hub (no recomendado pasar token en el script, pero es una opción)
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            # obtener imagen nueva
            docker pull ${IMAGE}
            # levantar contenedor (ajusta variables de puerto/env según tu app)
            docker run -d --name ${{ secrets.CONTAINER_NAME }} -p ${{ secrets.CONTAINER_PORT }}:3000 --restart unless-stopped ${IMAGE}
