name: CI/CD - Build & Deploy to OCI

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: alelex10/backend-crm

jobs:
  # build-and-push:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     image_tag: ${{ steps.set-tag.outputs.image_tag }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set image tag
  #       id: set-tag
  #       run: echo "image_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     # üß† Cache de capas de Docker
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build and push with cache
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         tags: |
  #           ${{ env.IMAGE_NAME }}:latest
  #           ${{ env.IMAGE_NAME }}:${{ steps.set-tag.outputs.image_tag }}
  #         cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:cache
  #         cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:cache,mode=max

  # deploy:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Install ssh client
  #       run: sudo apt-get update && sudo apt-get install -y openssh-client

  #     - name: Add SSH key
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.OCI_SSH_KEY }}" > ~/.ssh/deploy_key
  #         chmod 600 ~/.ssh/deploy_key

  #     - name: Add host to known_hosts
  #       run: ssh-keyscan -H ${{ secrets.TARGET_HOST }} >> ~/.ssh/known_hosts

  #     - name: Deploy via SSH - stop, pull and run
  #       uses: appleboy/ssh-action@v0.1.7
  #       with:
  #         host: ${{ secrets.TARGET_HOST }}
  #         username: ${{ secrets.TARGET_USER }}
  #         key: ${{ secrets.OCI_SSH_KEY }}
  #         script: |
  #           set -e
  #           IMAGE="alelex10/${{ secrets.CONTAINER_NAME }}:${{ needs.build-and-push.outputs.image_tag }}"
  #           CONTAINER_NAME="${{ secrets.CONTAINER_NAME }}"
  #           CONTAINER_PORT="${{ secrets.CONTAINER_PORT }}"

  #           docker stop $CONTAINER_NAME || true
  #           docker rm $CONTAINER_NAME || true

  #           echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

  #           docker pull $IMAGE

  #           docker run -d \
  #             -e DATABASE_URL='${{ secrets.DATABASE_URL }}' \
  #             -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
  #             -e JWT_SALT_ROUNDS='${{ secrets.JWT_SALT_ROUNDS }}' \
  #             --name $CONTAINER_NAME -p $CONTAINER_PORT:3000 --restart unless-stopped $IMAGE

  cleanup-old-images:
    runs-on: ubuntu-latest
    # needs: build-and-push
    steps:
      - name: Login to Docker Hub
        run: echo "Logged in as ${{ secrets.DOCKERHUB_USERNAME }}"

      - name: Clean up old Docker images on Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          KEEP=5
          REPO="alelex10/backend-crm"
          
          echo "Getting Docker Hub credentials..."

          # AUTH_TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.REPO_NAME }}:pull" \
          #   -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" | jq -r '.token')
          # if [ -z "$AUTH_TOKEN" ]; then
          #   echo "Error: No se pudo obtener el token de autenticaci√≥n."
          #   exit 1
          # fi

          AUTH_TOKEN="eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlFRmpDQ0F2NmdBd0lCQWdJVU9yTFd5UVpxMmFuZXd6WnhYN1JLbHQ3bDVUTXdEUVlKS29aSWh2Y05BUUVMQlFBd2dZWXhDekFKQmdOVkJBWVRBbFZUTVJNd0VRWURWUVFJRXdwRFlXeHBabTl5Ym1saE1SSXdFQVlEVlFRSEV3bFFZV3h2SUVGc2RHOHhGVEFUQmdOVkJBb1RERVJ2WTJ0bGNpd2dTVzVqTGpFVU1CSUdBMVVFQ3hNTFJXNW5hVzVsWlhKcGJtY3hJVEFmQmdOVkJBTVRHRVJ2WTJ0bGNpd2dTVzVqTGlCRmJtY2dVbTl2ZENCRFFUQWVGdzB5TlRBNU1qVXdNRE13TURCYUZ3MHlOakE1TWpVd01ETXdNREJhTUlHRk1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFU01CQUdBMVVFQnhNSlVHRnNieUJCYkhSdk1SVXdFd1lEVlFRS0V3eEViMk5yWlhJc0lFbHVZeTR4RkRBU0JnTlZCQXNUQzBWdVoybHVaV1Z5YVc1bk1TQXdIZ1lEVlFRREV4ZEViMk5yWlhJc0lFbHVZeTRnUlc1bklFcFhWQ0JEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTnRzeXZ4V2w2a04yYlBGd1o2dVVoS1dzQStZMW5FMFZvcHdZRzFtaDFjeGdYS0pZMWdsb0ZXeHl2T3JCWTcxQ1dHOHBONkhlSGt0YUR4cVE3QnphSk9tcWJiNkc4cUFnZFIwN3V2RjliTVpEV2RlbEo0YnJiYlhCTFozNE5GMHJmc0FpbVBuQWRJMFZwL1FLYmdhS3VpZ0VMUnEwMkZobmpubFRpK0hNZk1VYU5oZmI0Y1JIWGx3Z3lqaXJucDhMN3N5ZzRxVE1jQ1lmaFp2WWJ2SzYyb3J5a2c5UGg3aEJPT25rMkVtN2pBaC9CaFVjMU1BSFl0cHhWSHpzc0ZzQm9OaUhhRkg0ODdwK3ZSOUVRVlE2OXgveUVpS3JSV3NrRDBaZThRTDN5MVpTSm5zNHQvMmhEVEVNMWVJanJpQm9SYzlkc3dSTUpvMHhLejB0bkgvblE4Q0F3RUFBYU43TUhrd0RnWURWUjBQQVFIL0JBUURBZ0dtTUJNR0ExVWRKUVFNTUFvR0NDc0dBUVVGQndNQk1CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRQXdIUVlEVlIwT0JCWUVGR3FLM09QdjlXMTNqVXZ5TS82Mng3RjZlWGJaTUI4R0ExVWRJd1FZTUJhQUZDNjBVUE5lQmtvZ1kyMnRYUGNCTUhGdkczQ3NNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNFOUxsMitqT2tIcHdOTlNEYnpYbEJrbmlxamE4M0ZjZnNQUlVvV2hhbkN4TitxdVgreCsyc3hvSDJacXRMclZsaGxoZlEwTmRzNU13aDZZdmFMM2xvdVBuS1hYbFJHK3lHYjFlVVRpa0RVSHRtMVJuYkJlSU9xaUxrZUxkZFI2MkMzQUFQOVBCR2NtVGd1cjk5RUNtNFpHNUJLNC9kUXRrbGl3NVBiSEtvMVBtRDJldjV0T243T1FmRzFoN3NxTTRZVkRxbHZYd29zdWFzOE54cDNjK2Iwb0N1dzUvajZBUXdMWENjR1l0eHlhc2x3UFozbEpHWGdxaUpZRGJ0K3JhUmUvSXl5dmY4UTdIUHNzZ29VTk82bER5L05PclRjTlFjOUpsanl0ZlRQQ3NFK3Ewb1E2clRqWFQzL0dNSFdvYm1oaGVhanp2NXF3Mm5LQ29ENGtHayJdfQ.eyJhY2Nlc3MiOlt7ImFjdGlvbnMiOlsicHVsbCJdLCJuYW1lIjoiYWxlbGV4MTAvYmFja2VuZC1jcm0iLCJwYXJhbWV0ZXJzIjp7InB1bGxfbGltaXQiOiIyMDAiLCJwdWxsX2xpbWl0X2ludGVydmFsIjoiMjE2MDAifSwidHlwZSI6InJlcG9zaXRvcnkifV0sImF1ZCI6InJlZ2lzdHJ5LmRvY2tlci5pbyIsImV4cCI6MTc2MTgyOTYwMSwiaHR0cHM6Ly9hdXRoLmRvY2tlci5pbyI6eyJhdF9pZCI6ImNiZjAwZGNhLWUwYzMtNDJlNi1iMDY1LWI1NDllNzVhMDJjOSIsImF0X25hbWUiOiJnaXRodWItYWN0aW9uLW9yYml0LWNybS0yIiwicGF0X2lkIjoiY2JmMDBkY2EtZTBjMy00MmU2LWIwNjUtYjU0OWU3NWEwMmM5IiwicGxhbl9uYW1lIjoiZnJlZSIsInVzZXJuYW1lIjoiYWxlbGV4MTAifSwiaWF0IjoxNzYxODI5MzAxLCJpc3MiOiJhdXRoLmRvY2tlci5pbyIsImp0aSI6ImRja3JfanRpX2txenN6NDdIUlY2ekp0VFZndU1PcU1Jd0g5Yz0iLCJuYmYiOjE3NjE4MjkwMDEsInN1YiI6IjJiN2IxN2Q1LTU5M2YtNDc5Yy1iM2I5LWQ2ZjNkNGI3ODU2YyJ9.qIjzNLkyjtj-W0E_R6MrpdbfkCrtxek3XHMol8RfEcj0BI09OG7RjYYJMafBhitdSibLf3q8K_9qUmZkpreknaZ2gcjsiKgjw4-d15YXXSCx4CiZRGZ6SXCy4rKwMsgXwCU_dPcvuRu2xgWyyE01bLwNrL3FoMtetft0hbbW_AjSO2pb1o_SkZitibkMG-aYYQJOlzuHxuwSMAQqZ4CRvbcITG4Obe3uOqL8C5yrp_VQxlwGDRCAugOF5fm0PxKe86OZffOViVn9qRAlFymtYQHzkOoy4tk7b5Fz2BbKhhQIjKNlN2DsSdbAg9mycAeflNRGvhLUw-7CsU1bFB8bLA"

          HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ secrets.DOCKERHUB_USERNAME }}\", \"password\": \"${{ secrets.DOCKERHUB_TOKEN }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
          if [ -z "$HUB_TOKEN" ]; then
            echo "Error: No se pudo obtener el token de autenticaci√≥n."
            exit 1
          fi

          echo "Token de autenticaci√≥n obtenido ${HUB_TOKEN} and ${AUTH_TOKEN}"

          echo "üîç Getting tags for $REPO..."
          
          echo "Listando etiquetas para alelex10/backend-crm..."

          curl -s -H "Authorization: Bearer $AUTH_TOKEN" "https://registry-1.docker.io/v2/alelex10/backend-crm/tags/list"
          # echo $TAGS
          # COUNT=$(echo "$TAGS" | wc -l)
          # echo "Found $COUNT tags"

          # if [ "$COUNT" -gt "$KEEP" ]; then
          #   DELETE_TAGS=$(echo "$TAGS" | head -n -$KEEP)
          #   for tag in $DELETE_TAGS; do
          #     echo "üóëÔ∏è Deleting $tag..."
          #     curl -i -X DELETE \
          #       -H "Accept: application/json" \
          #       -H "Authorization: JWT $HUB_TOKEN" \
          #       https://hub.docker.com/v2/repositories/alelex10/backend-crm/tags/c6ddf45a/
          #   done
          # else
          #   echo "No tags to delete."
          # fi
